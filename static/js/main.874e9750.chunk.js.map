{"version":3,"sources":["CardMemoryGame/CardMemoryGame.tsx","index.tsx"],"names":["CardMemoryGame","useState","cards","setCards","firstCard","setFirstCard","winner","setWinner","Area","setArea","disableAll","setDisableAll","start","setStart","showStart","setShowStart","count","setCount","timer","setTimer","startTimer","setStartTimer","isInitialMount","useRef","useEffect","current","setTimeout","setGame","size","areaSize","sameElemenets","Math","floor","arrToUse","i","newCard","id","uuidv4","image","show","orderNumber","random","newCard2","push","sort","a","b","convertCounter","time","minutes","seconds","ret","className","type","onClick","undefined","map","card","src","alt","disabled","copyCards","index","findIndex","element","filter","length","firstCardIndex","secondCardIndex","changeToName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.874e9750.chunk.js","sourcesContent":["/* eslint-disable max-len */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport './CardMemoryGame.css';\r\n\r\ninterface State {\r\n  id: string;\r\n  image: string;\r\n  show: boolean;\r\n  orderNumber:number;\r\n}   \r\n\r\nconst CardMemoryGame = () => {\r\n  const [cards, setCards] = useState<State[]>([]);\r\n  const [firstCard, setFirstCard] = useState<State | undefined>();\r\n  const [winner, setWinner] = useState(false);\r\n  const [Area, setArea] = useState('');\r\n  const [disableAll, setDisableAll] = useState(false);\r\n  const [start, setStart]= useState(false);\r\n  const [showStart, setShowStart]= useState(true);\r\n  const [count, setCount]= useState(0);\r\n  const [timer, setTimer]=useState(0);\r\n  const [startTimer, setStartTimer]=useState(false);\r\n  const isInitialMount = useRef(true);\r\n\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    }  \r\n    if (startTimer) {\r\n      if (!winner){\r\n        setTimeout(() => setTimer(timer + 1), 1000);\r\n      } else {\r\n        setTimer(timer);\r\n      } \r\n    }\r\n  }, [timer, startTimer]);\r\n\r\n\r\n  const changeToName = (card:State) => {\r\n    const copyCards = [...cards];\r\n    const index =  cards.findIndex(element => element === card);\r\n    copyCards[index].show= !copyCards[index].show;\r\n    setCards(copyCards);\r\n    const done = cards.filter(element => element.show);\r\n\r\n    if (done.length === cards.length) {\r\n      setWinner(true);\r\n    } \r\n\r\n    setCount(count+1);\r\n\r\n    if (!firstCard) {\r\n      setFirstCard(card);\r\n    } else if (firstCard.image !== card.image) {\r\n      setDisableAll(true);\r\n      setTimeout(() => {\r\n        const firstCardIndex =  cards.findIndex(element => element === firstCard);\r\n        const secondCardIndex =  cards.findIndex(element => element === card);\r\n        copyCards[firstCardIndex].show= false;\r\n        copyCards[secondCardIndex].show= false;    \r\n        setCards(copyCards);\r\n        setFirstCard(undefined);\r\n        setDisableAll(false);\r\n      }, 1000);\r\n    } else {\r\n      setFirstCard(undefined);\r\n      setCards(copyCards);\r\n    }\r\n  };\r\n \r\n  const setGame = (size:number, areaSize:string)=>{\r\n    setTimeout(() => {\r\n      setArea(areaSize);\r\n      const sameElemenets: number = Math.floor((size*size/2));\r\n      const arrToUse:State[]= [];\r\n      for (let i=0; i<sameElemenets; i++){\r\n        const newCard:State = {\r\n          id:  uuidv4(),\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        const newCard2:State = {\r\n          id:  uuidv4(),\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        arrToUse.push(newCard);\r\n        arrToUse.push(newCard2);\r\n      }\r\n      arrToUse.sort((a, b) => a.orderNumber- b.orderNumber);\r\n      setCards(arrToUse);\r\n      setStart(false);\r\n      setShowStart(false);\r\n      setCount(0);\r\n      setTimer(0);\r\n      setStartTimer(true);\r\n    // console.log(arrToUse);\r\n    }, 500);\r\n  };\r\n\r\n  const startGameHandler = () => {\r\n    setStart(true);\r\n    const arrToUse:State[]= [];\r\n    setCards(arrToUse);\r\n    setFirstCard(undefined);\r\n    setArea('');\r\n    setWinner(false);\r\n    setStartTimer(false);\r\n    setTimer(0);\r\n  };\r\n\r\n  const convertCounter = (time:number) => {\r\n    const minutes:number = Math.floor(time / 60);\r\n    const seconds:number = time - minutes * 60;\r\n    let ret = '';\r\n    ret += `${  minutes  }:${  seconds < 10 ? '0' : ''}`;\r\n    ret += `${  seconds}`;\r\n    return ret;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"header\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-4\">\r\n            <div className=\"button__start-wrapper\">\r\n              <button type=\"button\" className=\"button__start\" onClick={() => startGameHandler()}>{showStart? 'START GAME' : 'PLAY AGAIN'}</button>\r\n            </div>\r\n            \r\n          </div>\r\n          <div className=\"col-xs-6\">\r\n            {start && (\r\n              <div className=\"button__option-wrapper\">\r\n                <button type=\"button\" className=\"button__option\" onClick={() => setGame(4, 'small')}>4x4 spēle</button>\r\n                <button type=\"button\" className=\"button__option\" onClick={() => setGame(6, 'medium')}>6x6 spēle</button>\r\n                <button type=\"button\" className=\"button__option\" onClick={() => setGame(10, 'large')}>10x10 spēle</button>\r\n              </div>\r\n            ) }\r\n            {!showStart && \r\n           (\r\n             <div className=\"button__option-wrapper\">\r\n               <div className='count'>steps: {count > 0 && count}</div>\r\n               <div className='time'>time: {timer> 0 && convertCounter(timer)}</div>\r\n             </div>\r\n           )}\r\n          </div>\r\n          <div className=\"col-xs-2\">\r\n            <div className='records-wrapper'>\r\n              <button type='button' className='button__option records'>Records</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"row center-xs\"> \r\n        <div className={`game ${Area==='medium' && 'medium'} ${Area==='large' && 'large'}`}>\r\n          <div className=\"card\">\r\n            {Area && \r\n\r\n          cards.map(card => card.show ?\r\n            (\r\n              <>\r\n                <div key={card.id} className={`card__front  ${Area==='medium' && 'card__front--medium'}  ${Area==='large' && 'card__front--large'}`}> \r\n                  <div className='loader' /> \r\n                  <img src={card.image} alt={card.image} className='card__front-image' />\r\n                </div>\r\n                {winner && \r\n                <div className=\"winner-wrapper\" key={card.id}> \r\n                  <h2 className=\"winner\">You are the winner!!! Your time is {convertCounter(timer)} and you made {count} steps</h2>\r\n                </div>}\r\n              </>\r\n            ):\r\n            (\r\n              <div key={card.id} className={`card__back ${Area==='medium' && 'card__back--medium'} ${Area==='large' && 'card__back--large'}`}>\r\n                <button type=\"button\" className='card__back-button' disabled={disableAll} onClick={()=>changeToName(card)}>+</button>\r\n              </div>\r\n            )\r\n     \r\n          ) }\r\n          </div>\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\n\r\nexport default CardMemoryGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport CardMemoryGame from './CardMemoryGame/CardMemoryGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardMemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}