{"version":3,"sources":["CardMemoryGame/CardMemoryGame.tsx","index.tsx"],"names":["CardMemoryGame","useState","cards","setCards","firstCard","setFirstCard","winner","setWinner","Area","setArea","disableAll","setDisableAll","start","setStart","setGame","size","areaSize","sameElemenets","Math","floor","arrToUse","i","newCard","id","uuidv4","image","show","orderNumber","random","newCard2","push","sort","a","b","className","type","onClick","map","card","src","alt","disabled","copyCards","index","findIndex","element","filter","length","setTimeout","firstCardIndex","secondCardIndex","undefined","changeToName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83b208d2.chunk.js","sourcesContent":["/* eslint-disable max-len */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport './CardMemoryGame.css';\r\n\r\ninterface State {\r\n  id: string;\r\n  image: string;\r\n  show: boolean;\r\n  orderNumber:number;\r\n}   \r\n\r\nconst CardMemoryGame = () => {\r\n  const [cards, setCards] = useState<State[]>([]);\r\n  const [firstCard, setFirstCard] = useState<State | undefined>();\r\n  const [winner, setWinner] = useState('');\r\n  const [Area, setArea] = useState('');\r\n  const [disableAll, setDisableAll] = useState(false);\r\n  const [start, setStart]= useState(false);\r\n\r\n  const changeToName = (card:State) => {\r\n    const copyCards = [...cards];\r\n    const index =  cards.findIndex(element => element === card);\r\n    copyCards[index].show= !copyCards[index].show;\r\n    setCards(copyCards);\r\n\r\n    const done = cards.filter(element => element.show);\r\n    ( done.length === cards.length) && setWinner('We Have A Winner');\r\n\r\n    if (!firstCard) {\r\n      setFirstCard(card);\r\n    } else if (firstCard.image !== card.image) {\r\n      setDisableAll(true);\r\n      setTimeout(() => {\r\n        const firstCardIndex =  cards.findIndex(element => element === firstCard);\r\n        const secondCardIndex =  cards.findIndex(element => element === card);\r\n        copyCards[firstCardIndex].show= false;\r\n        copyCards[secondCardIndex].show= false;    \r\n        setCards(copyCards);\r\n        setFirstCard(undefined);\r\n        setDisableAll(false);\r\n      }, 1000);\r\n    } else {\r\n      setFirstCard(undefined);\r\n      setCards(copyCards);\r\n    } \r\n  };\r\n \r\n  const setGame = (size:number, areaSize:string)=>{\r\n    setArea(areaSize);\r\n    const sameElemenets: number = Math.floor((size*size/2));\r\n    const arrToUse:State[]= [];\r\n    for (let i=0; i<sameElemenets; i++){\r\n      const newCard:State = {\r\n        id:  uuidv4(),\r\n        image : `https://picsum.photos/id/${i*10}/200/200`,\r\n        show: false,\r\n        orderNumber: Math.floor(Math.random() * 999)\r\n      };\r\n      const newCard2:State = {\r\n        id:  uuidv4(),\r\n        image : `https://picsum.photos/id/${i*10}/200/200`,\r\n        show: false,\r\n        orderNumber: Math.floor(Math.random() * 999)\r\n      };\r\n      arrToUse.push(newCard);\r\n      arrToUse.push(newCard2);\r\n    }\r\n    arrToUse.sort((a, b) => a.orderNumber- b.orderNumber);\r\n    setCards(arrToUse);\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"button__start-wrapper\">\r\n            <button type=\"button\" className=\"button__start\" onClick={() => setStart(true)}>Sākt Spēli</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {start && (\r\n      <div className=\"row center-xs\">\r\n        <div className=\"button__option-wrapper\">\r\n          <div className=\"col-xs-4\">\r\n            <button type=\"button\" className=\"button__option\" onClick={() => setGame(4, 'small')}>4x4 spēle</button>\r\n          </div>\r\n          <div className=\"col-xs-4\">\r\n            <button type=\"button\" className=\"button__option\" onClick={() => setGame(6, 'medium')}>6x6 spēle</button>\r\n          </div>\r\n          <div className=\"col-xs-4\">\r\n            <button type=\"button\" className=\"button__option\" onClick={() => setGame(10, 'large')}>10x10 spēle</button>\r\n          </div>\r\n        </div>\r\n        <h1 className={`heading ${winner && 'heading-show' }`}>{winner}</h1>\r\n      </div>\r\n      )}\r\n      <div className=\"row center-xs\"> \r\n      \r\n        <div className={`game ${Area==='medium' && 'medium'} ${Area==='large' && 'large'}`}>\r\n          <div className=\"card\">\r\n            {Area && \r\n\r\n          cards.map(card => card.show ?\r\n            (\r\n              \r\n              <div key={card.id} className={`card__front  ${Area==='medium' && 'card__front--medium'}  ${Area==='large' && 'card__front--large'}`}> \r\n                <img src={card.image} alt={card.image} className='card__image' />\r\n              </div>\r\n             \r\n            ):\r\n            (\r\n              <div className={`card__back ${Area==='medium' && 'card__back--medium'} ${Area==='large' && 'card__back--large'}`}>\r\n                <button type=\"button\" key={card.id} className='card__backSide' disabled={disableAll} onClick={()=>changeToName(card)}>+</button>\r\n              </div>\r\n            )\r\n          \r\n          ) }\r\n          </div>\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\n\r\nexport default CardMemoryGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport CardMemoryGame from './CardMemoryGame/CardMemoryGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardMemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}