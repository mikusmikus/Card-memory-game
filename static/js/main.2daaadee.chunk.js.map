{"version":3,"sources":["components/button/button.tsx","components/table/table.tsx","components/cards/card-front.tsx","components/cards/cards-back.tsx","CardMemoryGame/CardMemoryGame.tsx","index.tsx"],"names":["Button","setGameHandler","label","type","className","onClick","ResultTable","heading","resultArr","handleTime","map","index","name","steps","time","id","toUpperCase","substring","CardFront","card","area","src","image","alt","CardBack","disableAll","timer","changeToName","disabled","mediumResult","uuidv4","largeResult","CardMemoryGame","useState","cards","setCards","easyResults","setEasyResults","mediumResults","setMediumResults","largeResults","setLargeResults","firstCard","setFirstCard","winner","setWinner","records","setRecords","setArea","setDisableAll","start","setStart","count","setCount","setTimer","startTimer","setStartTimer","inputName","setInputName","inputEl","useRef","useEffect","storageStart","localStorage","getItem","JSON","parse","storageCount","storageTimer","storageCards","storageArea","storageStartTimer","storageEasyResults","current","focus","setItem","stringify","setTimeout","setGame","size","areaSize","sameElemenets","Math","floor","arrToUse","i","newCard","show","orderNumber","random","newCard2","push","sort","a","b","convertCounter","minutes","seconds","ret","undefined","copyCards","findIndex","element","filter","length","firstCardIndex","secondCardIndex","htmlFor","onChange","e","target","value","ref","sortedEasyResults","sortedMediumResults","sortedLargeResults","alert","saveNewResult","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2daaadee.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\ntype Props ={\r\n  label:string,\r\n  setGameHandler : () => void;\r\n};\r\n\r\n\r\nconst Button: FC<Props> = ({ setGameHandler, label }) => {\r\n  return (\r\n    <button type=\"button\" className=\"button button--option\" onClick={setGameHandler}>{label}</button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC } from 'react';\r\nimport type { Result }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\n\r\n\r\ntype Props = {\r\n  heading: string,\r\n  resultArr: Result[]\r\n  handleTime: (time:number) => string\r\n};\r\n\r\nconst ResultTable: FC<Props> = ({ heading, resultArr, handleTime }) => {\r\n  return (\r\n    <div>\r\n      <h5 className=\"results__heading\">{heading}</h5>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>name</th>\r\n            <th>time</th>\r\n            <th>steps</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultArr.map(({ name, steps, time, id }, index) => (\r\n            <tr key={id} className=\"statistics\">\r\n              <td className=\"statistics__place\"> {index + 1}. </td>\r\n              <td>{name.toUpperCase().substring(0, 12)}</td>\r\n              <td>{handleTime(time)}</td>\r\n              <td>{steps}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultTable;\r\n","import React, { FC } from 'react';\r\nimport type { Card }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\ntype Props ={\r\n  card : Card;\r\n  area : string\r\n};\r\n\r\n\r\n\r\nconst CardFront: FC<Props>= ({ card, area }) => {\r\n  return (\r\n    <div key={card.id} className={`card__front  ${area==='medium' && 'card__front--medium'}  ${area==='large' && 'card__front--large'}`}> \r\n      <div className='loader' /> \r\n      <img src={card.image} alt={card.image} className='card__front-image' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardFront;\r\n","import React, { FC } from 'react';\r\nimport type { Card }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\ntype Props ={\r\n  card : Card;\r\n  area : string\r\n  disableAll: boolean;\r\n  timer:number\r\n  changeToName: () => void;\r\n};\r\n\r\n\r\n\r\nconst CardBack: FC<Props>= ({ card, area, disableAll, timer, changeToName }) => {\r\n  return (\r\n    <>\r\n      <div key={card.id} className={`card__back ${area==='medium' && 'card__back--medium'} ${area==='large' && 'card__back--large'}`}>\r\n        <button type=\"button\" className='card__back-button' disabled={disableAll} onClick={changeToName}>+</button>\r\n      </div>\r\n      {timer < 0 && \r\n      <div className=\"start-counter-wrapper\">\r\n        <p className=\"start-counter\">{timer *-1}</p>\r\n      </div> }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardBack;\r\n","/* eslint-disable max-len */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport './CardMemoryGame.css';\r\nimport Button from '../components/button/button';\r\nimport ResultTable from '../components/table/table';\r\nimport CardFront from '../components/cards/card-front';\r\nimport CardBack from '../components/cards/cards-back';\r\n\r\nexport type Card  = {\r\n  id: string;\r\n  image: string;\r\n  show: boolean;\r\n  orderNumber:number;\r\n};   \r\n\r\n\r\n\r\n\r\nconst mediumResult = [\r\n  { id:  uuidv4(),\r\n    name : 'john',\r\n    steps:99,\r\n    time: 223, \r\n  },\r\n  { id: uuidv4(),\r\n    name : 'tomstoms',\r\n    steps:55,\r\n    time: 245, \r\n  },\r\n  { id:  uuidv4(),\r\n    name : 'peter',\r\n    steps:99,\r\n    time: 377, \r\n  },\r\n\r\n];\r\n  \r\nconst largeResult = [\r\n  {\r\n    id:  uuidv4(),\r\n    name : 'toms',\r\n    steps:134,\r\n    time: 445, \r\n  },\r\n  { \r\n    id: uuidv4(),\r\n    name : 'peter',\r\n    steps:222,\r\n    time: 977, \r\n  }\r\n];\r\n\r\nexport type Result = {\r\n  id: string;\r\n  name: string;\r\n  steps: number;\r\n  time:number;\r\n};\r\n\r\n\r\nconst CardMemoryGame = () => {\r\n\r\n\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [easyResults, setEasyResults] = useState<Result[]>([]);\r\n  const [mediumResults, setMediumResults] = useState<Result[]>(mediumResult);\r\n  const [largeResults, setLargeResults] = useState<Result[]>(largeResult);\r\n  const [firstCard, setFirstCard] = useState<Card | undefined>();\r\n  const [winner, setWinner] = useState(false);\r\n  const [records, setRecords] = useState(false);\r\n  const [area, setArea] = useState('');\r\n  const [disableAll, setDisableAll] = useState(false);\r\n  const [start, setStart]= useState(2);\r\n  const [count, setCount]= useState(0);\r\n  const [timer, setTimer]=useState(0);\r\n  const [startTimer, setStartTimer]=useState(false);\r\n  const [inputName, setInputName] = useState('');\r\n  const inputEl = useRef(null);\r\n  // const isInitialMount = useRef(true);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const storageStart = localStorage.getItem('start');\r\n    storageStart && setStart(JSON.parse(storageStart));\r\n    \r\n    const storageCount = localStorage.getItem('count');\r\n    storageCount && setCount(JSON.parse(storageCount));\r\n\r\n    const storageTimer = localStorage.getItem('timer');\r\n    storageTimer && setTimer(JSON.parse(storageTimer));\r\n\r\n    const storageCards = localStorage.getItem('cards');\r\n    storageCards && setCards(JSON.parse(storageCards));\r\n\r\n    const storageArea= localStorage.getItem('area');\r\n    storageArea && setArea(JSON.parse(storageArea));\r\n\r\n    const storageStartTimer= localStorage.getItem('startTimer');\r\n    storageStartTimer && setStartTimer(JSON.parse(storageStartTimer));\r\n\r\n    const storageEasyResults= localStorage.getItem('easyResults');\r\n    storageEasyResults && setEasyResults(JSON.parse(storageEasyResults));\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (startTimer) {\r\n      if (winner){\r\n        setTimer(timer);\r\n        // @ts-ignore\r\n        inputEl.current.focus();  \r\n      } else {\r\n        localStorage.setItem('timer', JSON.stringify(timer));\r\n        setTimeout(() => setTimer(timer + 1), 1000);\r\n      } \r\n    }\r\n  }, [timer, startTimer]);\r\n\r\n  \r\n  const changeToName = (card:Card) => {\r\n    const copyCards = [...cards];\r\n    const index =  cards.findIndex((element: Card) => element === card);\r\n    copyCards[index].show= !copyCards[index].show;\r\n    localStorage.setItem('cards', JSON.stringify(cards));\r\n    setCards(copyCards);\r\n    localStorage.setItem('count', JSON.stringify(count+1));\r\n    setCount(count+1);\r\n    \r\n    const done = cards.filter((element: Card) => element.show);\r\n    if (done.length === cards.length) {\r\n      setWinner(true);\r\n      // setTimer(timer);\r\n    } \r\n    \r\n    if (!firstCard) {\r\n      setFirstCard(card);\r\n    } else if (firstCard.image !== card.image) {\r\n      setDisableAll(true);\r\n      setTimeout(() => {\r\n        const firstCardIndex =  cards.findIndex((element: Card) => element === firstCard);\r\n        const secondCardIndex =  cards.findIndex((element: Card) => element === card);\r\n        copyCards[firstCardIndex].show= false;\r\n        copyCards[secondCardIndex].show= false;    \r\n        setCards(copyCards);\r\n        setFirstCard(undefined);\r\n        setDisableAll(false);\r\n      }, 1000);\r\n    } else {\r\n      setFirstCard(undefined);\r\n      setCards(copyCards);\r\n    }\r\n  };\r\n \r\n  const setGame = (size:number, areaSize:string)=>{\r\n    localStorage.setItem('area', JSON.stringify(areaSize));\r\n    setArea(areaSize);\r\n    setTimeout(() => {\r\n      const sameElemenets: number = Math.floor((size*size/2));\r\n      const arrToUse:Card[]= [];\r\n      for (let i=0; i<sameElemenets; i++){\r\n        const newCard:Card = {\r\n          id:  uuidv4(),\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        const newCard2:Card = {\r\n          id:  uuidv4()+1,\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        arrToUse.push(newCard);\r\n        arrToUse.push(newCard2);\r\n      }\r\n      arrToUse.sort((a, b) => a.orderNumber- b.orderNumber);\r\n      setCards(arrToUse);\r\n\r\n      localStorage.setItem('count', JSON.stringify(0));\r\n      setCount(0);\r\n      localStorage.setItem('start', JSON.stringify(0));\r\n      setStart(0);\r\n      localStorage.setItem('timer', JSON.stringify(-3));\r\n      setTimer(-3);\r\n      localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n      setStartTimer(true);\r\n    }, 300);\r\n  };\r\n\r\n  const startGameHandler = () => {\r\n    localStorage.setItem('start', JSON.stringify(1));\r\n    setStart(1);\r\n    const arrToUse:Card[]= [];\r\n    setCards(arrToUse);\r\n    setFirstCard(undefined);\r\n    setArea('');\r\n    setWinner(false);\r\n    localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n    setStartTimer(false);\r\n\r\n  };\r\n  \r\n  const convertCounter = (time:number) => {\r\n    const minutes:number = Math.floor(time / 60);\r\n    const seconds:number = time - minutes * 60;\r\n    let ret = '';\r\n    if (minutes > 0) {\r\n      ret += `${  minutes  }m:${  seconds < 10 ? '0' : ''}`;\r\n      ret += `${  seconds}s`;\r\n    } else {\r\n      ret+= `${seconds}sec`;\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  const saveNewResult= () => {\r\n    if (inputName) {\r\n      if (area === 'small'){\r\n        easyResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedEasyResults = easyResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        localStorage.setItem('easyResults', JSON.stringify(sortedEasyResults));\r\n        setEasyResults(sortedEasyResults);\r\n      } else if (area === 'medium'){\r\n        mediumResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedMediumResults = mediumResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setMediumResults(sortedMediumResults);\r\n      } else {\r\n        largeResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedLargeResults = largeResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setLargeResults(sortedLargeResults);\r\n        setLargeResults(largeResults);\r\n      }\r\n      setInputName('');\r\n      setArea('');\r\n      setWinner(false);\r\n    } else {\r\n      alert('enter your name to save result');\r\n    }\r\n  \r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* onClick={()=>setRecords(false)} aria-hidden=\"true\" */} \r\n      <div className={`records-wrapper ${records && 'active'} `}>\r\n        <div className={`records ${records && 'active'} `}>\r\n          <button type='button' className='cancel-button' onClick={()=>setRecords(false)}>X</button>\r\n          <div className=\"row \">\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='EASY (4x4)' resultArr={easyResults} handleTime={convertCounter} />\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='MEDIUM (6x6)' resultArr={mediumResults} handleTime={convertCounter} />\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='HARD (10x10)' resultArr={largeResults} handleTime={convertCounter} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <header className=\"header\">\r\n        <div className=\"row middle-xs\">\r\n          <div className=\"col-sm-4 col-xs-9\">\r\n            <div className=\"button__start-wrapper\">\r\n              <button type=\"button\" className=\"button\" onClick={() => startGameHandler()}>{!start? 'PLAY AGAIN' : 'START GAME'}</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6 col-xs-12 last-xs\">\r\n            {start === 1 && (\r\n              <div className=\"button__option-wrapper\">\r\n                <Button label='4x4 easy' setGameHandler={() => setGame(4, 'small')} />\r\n                <Button label='6x6 medium' setGameHandler={() => setGame(6, 'medium')} />\r\n                <Button label='10x10 hard' setGameHandler={() => setGame(10, 'large')} />\r\n              </div>\r\n            ) }\r\n            {(start === 0) && \r\n           (\r\n             <div className=\"button__option-wrapper\">\r\n               <div className='count'>steps: {count > 0 && count}</div>\r\n               <div className='time'>time: {timer > 0 && convertCounter(timer)}</div>\r\n             </div>\r\n           )}\r\n          </div>\r\n          <div className=\" col-sm-2 col-xs-3 last-sm\">\r\n            \r\n            <button type='button' className='button button--option button--record' onClick={()=>setRecords(true)}>Results</button>\r\n            \r\n          </div>\r\n        </div>\r\n      </header>\r\n      <div className=\"row center-xs\"> \r\n        <div className={`game ${area==='medium' && 'medium'} ${area==='large' && 'large'}`}>\r\n          <div className=\"card\">\r\n            {area && \r\n          cards.map((card: Card) => card.show ?\r\n            (\r\n              <CardFront area={area} card={card} />\r\n            ):\r\n            (\r\n              <CardBack area={area} card={card} disableAll={disableAll} timer={timer} changeToName={()=>changeToName(card)} />\r\n            )\r\n          )}\r\n            {winner && \r\n            <>\r\n              <label htmlFor=\"inputName\" className='input__label-wrapper'>\r\n                <p className='input__label'>enter your name to save result!</p>\r\n                <div className='input-wrapper'>\r\n                  <input type=\"text\" className='input' onChange={(e)=>setInputName(e.target.value)} ref={inputEl} />\r\n                  <button type=\"button\" className=\"input__button\" onClick={()=>saveNewResult()}>save</button>\r\n                </div>\r\n              </label>\r\n              <div className=\"winner-wrapper\"> \r\n                <h2 className=\"winner\">You are the winner!!! Your time is {convertCounter(timer)} and you made {count} steps</h2>\r\n              </div>\r\n            </>}\r\n\r\n          </div>\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default CardMemoryGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CardMemoryGame from './CardMemoryGame/CardMemoryGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardMemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}