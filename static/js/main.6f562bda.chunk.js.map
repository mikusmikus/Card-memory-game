{"version":3,"sources":["CardMemoryGame/CardMemoryGame.tsx","index.tsx"],"names":["mediumResult","id","uuidv4","name","steps","time","largeResult","CardMemoryGame","useState","cards","setCards","easyResults","setEasyResults","mediumResults","setMediumResults","largeResults","setLargeResults","firstCard","setFirstCard","winner","setWinner","records","setRecords","area","setArea","disableAll","setDisableAll","start","setStart","count","setCount","timer","setTimer","startTimer","setStartTimer","inputName","setInputName","useEffect","storageStart","localStorage","getItem","JSON","parse","storageCount","storageTimer","storageCards","storageArea","storageStartTimer","storageEasyResults","setItem","stringify","setTimeout","setGame","size","areaSize","sameElemenets","Math","floor","arrToUse","i","newCard","image","show","orderNumber","random","newCard2","push","sort","a","b","convertCounter","minutes","seconds","ret","className","type","onClick","map","index","toUpperCase","substring","undefined","card","src","alt","htmlFor","required","onChange","e","target","value","sortedEasyResults","sortedMediumResults","sortedLargeResults","alert","saveNewResult","disabled","copyCards","findIndex","element","filter","length","firstCardIndex","secondCardIndex","changeToName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f562bda.chunk.js","sourcesContent":["/* eslint-disable max-len */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport './CardMemoryGame.css';\r\n// import Table from '../components/table';\r\n\r\ntype Card  = {\r\n  id: string;\r\n  image: string;\r\n  show: boolean;\r\n  orderNumber:number;\r\n};   \r\n\r\n\r\n\r\n\r\nconst mediumResult = [\r\n  { id:  uuidv4(),\r\n    name : 'john',\r\n    steps:99,\r\n    time: 223, \r\n  },\r\n  { id: uuidv4(),\r\n    name : 'tomstoms',\r\n    steps:55,\r\n    time: 245, \r\n  },\r\n  { id:  uuidv4(),\r\n    name : 'peter',\r\n    steps:99,\r\n    time: 377, \r\n  },\r\n\r\n];\r\n  \r\nconst largeResult = [\r\n  {\r\n    id:  uuidv4(),\r\n    name : 'toms',\r\n    steps:134,\r\n    time: 445, \r\n  },\r\n  { \r\n    id: uuidv4(),\r\n    name : 'peter',\r\n    steps:222,\r\n    time: 977, \r\n  }\r\n];\r\n\r\nexport type Result = {\r\n  id: string;\r\n  name: string;\r\n  steps: number;\r\n  time:number;\r\n};\r\n\r\n\r\nconst CardMemoryGame = () => {\r\n\r\n\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [easyResults, setEasyResults] = useState<Result[]>([]);\r\n  const [mediumResults, setMediumResults] = useState<Result[]>(mediumResult);\r\n  const [largeResults, setLargeResults] = useState<Result[]>(largeResult);\r\n  const [firstCard, setFirstCard] = useState<Card | undefined>();\r\n  const [winner, setWinner] = useState(false);\r\n  const [records, setRecords] = useState(false);\r\n  const [area, setArea] = useState('');\r\n  const [disableAll, setDisableAll] = useState(false);\r\n  const [start, setStart]= useState(2);\r\n  const [count, setCount]= useState(0);\r\n  const [timer, setTimer]=useState(0);\r\n  const [startTimer, setStartTimer]=useState(false);\r\n  const [inputName, setInputName] = useState('');\r\n  // const isInitialMount = useRef(true);\r\n\r\n\r\n  useEffect(() => {\r\n    const storageStart = localStorage.getItem('start');\r\n    storageStart && setStart(JSON.parse(storageStart));\r\n    \r\n    const storageCount = localStorage.getItem('count');\r\n    storageCount && setCount(JSON.parse(storageCount));\r\n\r\n    const storageTimer = localStorage.getItem('timer');\r\n    storageTimer && setTimer(JSON.parse(storageTimer));\r\n\r\n    const storageCards = localStorage.getItem('cards');\r\n    storageCards && setCards(JSON.parse(storageCards));\r\n\r\n    const storageArea= localStorage.getItem('area');\r\n    storageArea && setArea(JSON.parse(storageArea));\r\n\r\n    const storageStartTimer= localStorage.getItem('startTimer');\r\n    storageStartTimer && setStartTimer(JSON.parse(storageStartTimer));\r\n\r\n    const storageEasyResults= localStorage.getItem('easyResults');\r\n    storageEasyResults && setEasyResults(JSON.parse(storageEasyResults));\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (startTimer) {\r\n      if (winner){\r\n        setTimer(timer);\r\n      } else {\r\n        localStorage.setItem('timer', JSON.stringify(timer));\r\n        setTimeout(() => setTimer(timer + 1), 1000);\r\n      } \r\n    }\r\n  }, [timer, startTimer, winner]);\r\n\r\n  \r\n  const changeToName = (card:Card) => {\r\n    const copyCards = [...cards];\r\n    const index =  cards.findIndex((element: Card) => element === card);\r\n    copyCards[index].show= !copyCards[index].show;\r\n    localStorage.setItem('cards', JSON.stringify(cards));\r\n    setCards(copyCards);\r\n    localStorage.setItem('count', JSON.stringify(count+1));\r\n    setCount(count+1);\r\n    \r\n    const done = cards.filter((element: Card) => element.show);\r\n    if (done.length === cards.length) {\r\n      setWinner(true);\r\n    } \r\n    \r\n    if (!firstCard) {\r\n      setFirstCard(card);\r\n    } else if (firstCard.image !== card.image) {\r\n      setDisableAll(true);\r\n      setTimeout(() => {\r\n        const firstCardIndex =  cards.findIndex((element: Card) => element === firstCard);\r\n        const secondCardIndex =  cards.findIndex((element: Card) => element === card);\r\n        copyCards[firstCardIndex].show= false;\r\n        copyCards[secondCardIndex].show= false;    \r\n        setCards(copyCards);\r\n        setFirstCard(undefined);\r\n        setDisableAll(false);\r\n      }, 1000);\r\n    } else {\r\n      setFirstCard(undefined);\r\n      setCards(copyCards);\r\n    }\r\n  };\r\n \r\n  const setGame = (size:number, areaSize:string)=>{\r\n    localStorage.setItem('area', JSON.stringify(areaSize));\r\n    setArea(areaSize);\r\n    setTimeout(() => {\r\n      const sameElemenets: number = Math.floor((size*size/2));\r\n      const arrToUse:Card[]= [];\r\n      for (let i=0; i<sameElemenets; i++){\r\n        const newCard:Card = {\r\n          id:  uuidv4(),\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        const newCard2:Card = {\r\n          id:  uuidv4()+1,\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        arrToUse.push(newCard);\r\n        arrToUse.push(newCard2);\r\n      }\r\n      arrToUse.sort((a, b) => a.orderNumber- b.orderNumber);\r\n      setCards(arrToUse);\r\n\r\n      localStorage.setItem('count', JSON.stringify(0));\r\n      setCount(0);\r\n      localStorage.setItem('start', JSON.stringify(0));\r\n      setStart(0);\r\n      localStorage.setItem('timer', JSON.stringify(-3));\r\n      setTimer(-3);\r\n      localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n      setStartTimer(true);\r\n    }, 300);\r\n  };\r\n\r\n  const startGameHandler = () => {\r\n    localStorage.setItem('start', JSON.stringify(1));\r\n    setStart(1);\r\n    const arrToUse:Card[]= [];\r\n    setCards(arrToUse);\r\n    setFirstCard(undefined);\r\n    setArea('');\r\n    setWinner(false);\r\n    localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n    setStartTimer(false);\r\n\r\n  };\r\n\r\n  const convertCounter = (time:number) => {\r\n    const minutes:number = Math.floor(time / 60);\r\n    const seconds:number = time - minutes * 60;\r\n    let ret = '';\r\n    if (minutes > 0) {\r\n      ret += `${  minutes  }m:${  seconds < 10 ? '0' : ''}`;\r\n      ret += `${  seconds}s`;\r\n    } else {\r\n      ret+= `${seconds}sec`;\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  const saveNewResult= () => {\r\n    if (inputName) {\r\n      if (area === 'small'){\r\n        easyResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedEasyResults = easyResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        localStorage.setItem('easyResults', JSON.stringify(sortedEasyResults));\r\n        setEasyResults(sortedEasyResults);\r\n      } else if (area === 'medium'){\r\n        mediumResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedMediumResults = mediumResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setMediumResults(sortedMediumResults);\r\n      } else {\r\n        largeResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedLargeResults = largeResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setLargeResults(sortedLargeResults);\r\n        setLargeResults(largeResults);\r\n      }\r\n      setInputName('');\r\n      setArea('');\r\n  \r\n    } else {\r\n      alert('enter name');\r\n    }\r\n  \r\n  };\r\n\r\n\r\n\r\n  const showResults = () => {\r\n    setRecords(true);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* onClick={()=>setRecords(false)} aria-hidden=\"true\" */} \r\n      <div className={`records-wrapper ${records && 'active'} `}>\r\n        <div className={`records ${records && 'active'} `}>\r\n          <button type='button' className='cancel-button' onClick={()=>setRecords(!records)}>X</button>\r\n          <div className=\"row \">\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <h5 className='results__heading'>EASY (4x4)</h5>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>name</th>\r\n                    <th>time</th>\r\n                    <th>steps</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {easyResults.map(({ name, steps, time, id }, index) =>\r\n                    <tr key={id} className=\"statistics\">\r\n                      <td className='statistics__place'> {index+1}. </td>\r\n                      <td>{name.toUpperCase().substring(0, 12)}</td>\r\n                      <td>{convertCounter(time)}</td>\r\n                      <td>{steps}</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <h5 className='results__heading'>MEDIUM (6x6)</h5>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>name</th>\r\n                    <th>time</th>\r\n                    <th>steps</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {mediumResults.map(({ name, steps, time, id }, index) =>\r\n                    <tr key={id} className=\"statistics\">\r\n                      <td className='statistics__place'> {index+1}. </td>\r\n                      <td>{name.toUpperCase()}</td>\r\n                      <td>{convertCounter(time)}</td>\r\n                      <td>{steps}</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            \r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <h5 className='results__heading'>HARD (10x10)</h5>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>name</th>\r\n                    <th>time</th>\r\n                    <th>steps</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {largeResults.map(({ name, steps, time, id }, index) =>\r\n                    <tr key={id} className=\"statistics\">\r\n                      <td className='statistics__place'> {index+1}. </td>\r\n                      <td>{name.toUpperCase()}</td>\r\n                      <td>{convertCounter(time)}</td>\r\n                      <td>{steps}</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <header className=\"header\">\r\n        <div className=\"row middle-xs\">\r\n          <div className=\"col-sm-4 col-xs-9\">\r\n            <div className=\"button__start-wrapper\">\r\n              <button type=\"button\" className=\"button\" onClick={() => startGameHandler()}>{!start? 'PLAY AGAIN' : 'START GAME'}</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6 col-xs-12 last-xs\">\r\n            {start === 1 && (\r\n              <div className=\"button__option-wrapper\">\r\n                <button type=\"button\" className=\"button button--option\" onClick={() => setGame(4, 'small')}>4x4 easy</button>\r\n                <button type=\"button\" className=\"button button--option\" onClick={() => setGame(6, 'medium')}>6x6 medium</button>\r\n                <button type=\"button\" className=\"button button--option\" onClick={() => setGame(10, 'large')}>10x10 hard</button>\r\n              </div>\r\n            ) }\r\n            {(start === 0) && \r\n           (\r\n             <div className=\"button__option-wrapper\">\r\n               <div className='count'>steps: {count > 0 && count}</div>\r\n               <div className='time'>time: {timer > 0 && convertCounter(timer)}</div>\r\n             </div>\r\n           )}\r\n          </div>\r\n          <div className=\" col-sm-2 col-xs-3 last-sm\">\r\n            \r\n            <button type='button' className='button button--option button--record' onClick={()=>showResults()}>Results</button>\r\n            \r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"row center-xs\"> \r\n        <div className={`game ${area==='medium' && 'medium'} ${area==='large' && 'large'}`}>\r\n          <div className=\"card\">\r\n            {area && \r\n\r\n          cards.map((card: Card) => card.show ?\r\n            (\r\n              <>\r\n                <div key={card.id} className={`card__front  ${area==='medium' && 'card__front--medium'}  ${area==='large' && 'card__front--large'}`}> \r\n                  <div className='loader' /> \r\n                  <img src={card.image} alt={card.image} className='card__front-image' />\r\n                </div>\r\n                {winner && \r\n                <>\r\n                  <div className=\"input-wrapper\">\r\n                    <label htmlFor=\"inputName\" className='input__label-wrapper'>\r\n                      <p className='input__label'>enter your name to save result!</p>\r\n                      <input type=\"text\" className='input' required onChange={(e)=>setInputName(e.target.value)} />\r\n                      <button type=\"button\" className=\"input__button\" onClick={()=>saveNewResult()}>save</button>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"winner-wrapper\" key={card.id}> \r\n                    <h2 className=\"winner\">You are the winner!!! Your time is {convertCounter(timer)} and you made {count} steps</h2>\r\n                  </div>\r\n                </>}\r\n              </>\r\n            ):\r\n            (\r\n              <>\r\n                <div key={card.id} className={`card__back ${area==='medium' && 'card__back--medium'} ${area==='large' && 'card__back--large'}`}>\r\n                  <button type=\"button\" className='card__back-button' disabled={disableAll} onClick={()=>changeToName(card)}>+</button>\r\n                </div>\r\n                {timer < 0 && \r\n                <div className=\"start-counter-wrapper\">\r\n                  <p className=\"start-counter\">{timer *-1}</p>\r\n                </div> }\r\n              </>\r\n            )\r\n     \r\n          ) }\r\n          </div>\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\n\r\nexport default CardMemoryGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CardMemoryGame from './CardMemoryGame/CardMemoryGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardMemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}