{"version":3,"sources":["CardMemoryGame/CardMemoryGame.tsx","components/button/button.tsx","components/table/table.tsx","components/cards/card-front.tsx","components/cards/cards-back.tsx","components/winner/winner.tsx","index.tsx"],"names":["timeOutId","Button","setGameHandler","label","type","className","onClick","ResultTable","heading","resultArr","handleTime","map","index","name","steps","time","id","toUpperCase","substring","CardFront","card","area","src","image","alt","CardBack","timer","changeToName","Winner","count","saveNewResult","inputHandler","inputName","myRef","htmlFor","onChange","value","ref","openCards","mediumResult","uuidv4","largeResult","CardMemoryGame","useState","firstCard","setFirstCard","secondCard","setSecondCard","cards","setCards","easyResults","setEasyResults","mediumResults","setMediumResults","largeResults","setLargeResults","winner","setWinner","records","setRecords","setArea","start","setStart","setCount","setTimer","startTimer","setStartTimer","setInputName","inputEl","useRef","useEffect","storageArea","localStorage","getItem","JSON","parse","storageEasyResults","current","focus","setTimeout","setGame","size","areaSize","sameElemenets","Math","floor","arrToUse","i","newCard","show","orderNumber","random","newCard2","push","sort","a","b","convertTime","minutes","seconds","ret","undefined","cardIndex","copyCards","clearTimeout","index1","findIndex","element","index2","filter","length","sortedEasyResults","setItem","stringify","sortedMediumResults","sortedLargeResults","alert","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b516a70c.chunk.js","sourcesContent":["/* eslint-disable max-len */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport './CardMemoryGame.css';\r\nimport Button from '../components/button/button';\r\nimport ResultTable from '../components/table/table';\r\nimport CardFront from '../components/cards/card-front';\r\nimport CardBack from '../components/cards/cards-back';\r\nimport Winner from '../components/winner/winner';\r\n\r\n\r\n\r\nexport type Card  = {\r\n  id: string;\r\n  image: string;\r\n  show: boolean;\r\n  orderNumber:number;\r\n};   \r\n\r\nlet openCards = 0;\r\nlet timeOutId:NodeJS.Timeout;\r\n\r\nconst mediumResult = [\r\n  { id:  uuidv4(),\r\n    name : 'john',\r\n    steps:99,\r\n    time: 223, \r\n  },\r\n  { id: uuidv4(),\r\n    name : 'tomstoms',\r\n    steps:55,\r\n    time: 245, \r\n  },\r\n  { id:  uuidv4(),\r\n    name : 'peter',\r\n    steps:99,\r\n    time: 377, \r\n  },\r\n\r\n];\r\n  \r\nconst largeResult = [\r\n  {\r\n    id:  uuidv4(),\r\n    name : 'toms',\r\n    steps:134,\r\n    time: 445, \r\n  },\r\n  { \r\n    id: uuidv4(),\r\n    name : 'peter',\r\n    steps:222,\r\n    time: 977, \r\n  }\r\n];\r\n\r\nexport type Result = {\r\n  id: string;\r\n  name: string;\r\n  steps: number;\r\n  time:number;\r\n};\r\n\r\n\r\nconst CardMemoryGame = () => {\r\n\r\n\r\n  const [firstCard, setFirstCard] = useState<Card>();\r\n  const [secondCard, setSecondCard] = useState<Card>();\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [easyResults, setEasyResults] = useState<Result[]>([]);\r\n  const [mediumResults, setMediumResults] = useState<Result[]>(mediumResult);\r\n  const [largeResults, setLargeResults] = useState<Result[]>(largeResult);\r\n  const [winner, setWinner] = useState(false);\r\n  const [records, setRecords] = useState(false);\r\n  const [area, setArea] = useState('');\r\n  const [start, setStart]= useState(2);\r\n  const [count, setCount]= useState(0);\r\n  const [timer, setTimer]=useState(0);\r\n  const [startTimer, setStartTimer]=useState(false);\r\n  const [inputName, setInputName] = useState('');\r\n  const inputEl = useRef(null);\r\n  // const isInitialMount = useRef(true);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    // const storageStart = localStorage.getItem('start');\r\n    // storageStart && setStart(JSON.parse(storageStart));\r\n    \r\n    // const storageCount = localStorage.getItem('count');\r\n    // storageCount && setCount(JSON.parse(storageCount));\r\n\r\n    // const storageTimer = localStorage.getItem('timer');\r\n    // storageTimer && setTimer(JSON.parse(storageTimer));\r\n\r\n    // const storageCards = localStorage.getItem('cards');\r\n    // storageCards && setCards(JSON.parse(storageCards));\r\n\r\n    const storageArea= localStorage.getItem('area');\r\n    storageArea && setArea(JSON.parse(storageArea));\r\n\r\n    // const storageStartTimer= localStorage.getItem('startTimer');\r\n    // storageStartTimer && setStartTimer(JSON.parse(storageStartTimer));\r\n\r\n    const storageEasyResults= localStorage.getItem('easyResults');\r\n    storageEasyResults && setEasyResults(JSON.parse(storageEasyResults));\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (startTimer) {\r\n      if (winner){\r\n        setTimer(timer);\r\n        // @ts-ignore\r\n        inputEl.current.focus();  \r\n      } else {\r\n        // localStorage.setItem('timer', JSON.stringify(timer));\r\n        setTimeout(() => setTimer(timer + 1), 1000);\r\n      } \r\n    }\r\n  }, [timer, startTimer]);\r\n\r\n  \r\n\r\n\r\n\r\n  const changeToName = (card:Card, cardIndex:number) => {\r\n    const copyCards = [...cards];\r\n    setCount(count+1);\r\n    clearTimeout(timeOutId);\r\n    if (openCards === 2){\r\n      if (firstCard && secondCard ) {\r\n        if (firstCard.image !== secondCard.image){\r\n          const index1 =  cards.findIndex((element: Card) => element === firstCard);\r\n          copyCards[index1].show=false;\r\n          const index2 =  cards.findIndex((element: Card) => element === secondCard);\r\n          copyCards[index2].show=false;\r\n          setCards(copyCards);\r\n          openCards = 0;\r\n        } else {\r\n          openCards = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    openCards +=1; \r\n\r\n    if (openCards === 1) {\r\n      setFirstCard(card);\r\n      copyCards[cardIndex].show=true;\r\n      setCards(copyCards);\r\n    } \r\n    if (openCards === 2) {\r\n      setSecondCard(card);\r\n      copyCards[cardIndex].show=true;\r\n      setCards(copyCards);\r\n\r\n\r\n      if (firstCard){\r\n        if (firstCard.image !== card.image){\r\n          const index1 =  cards.findIndex((element: Card) => element === firstCard);\r\n          timeOutId = setTimeout(() => {\r\n            copyCards[index1].show=false;\r\n            copyCards[cardIndex].show=false;\r\n            setCards(copyCards); \r\n          }, 3000);\r\n        }\r\n      }\r\n    }\r\n\r\n    const done = cards.filter((element: Card) => element.show);\r\n    if (done.length === cards.length) {\r\n      setWinner(true);\r\n    } \r\n\r\n  };\r\n \r\n  const setGame = (size:number, areaSize:string)=>{\r\n    // localStorage.setItem('area', JSON.stringify(areaSize));\r\n    setArea(areaSize);\r\n    setTimeout(() => {\r\n      const sameElemenets: number = Math.floor((size*size/2));\r\n      const arrToUse:Card[]= [];\r\n      for (let i=0; i<sameElemenets; i++){\r\n        const newCard:Card = {\r\n          id:  uuidv4(),\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        const newCard2:Card = {\r\n          id:  uuidv4()+1,\r\n          image : `https://picsum.photos/id/${i*4}/200/200`,\r\n          show: false,\r\n          orderNumber: Math.floor(Math.random() * 999)\r\n        };\r\n        arrToUse.push(newCard);\r\n        arrToUse.push(newCard2);\r\n      }\r\n      arrToUse.sort((a, b) => a.orderNumber- b.orderNumber);\r\n      setCards(arrToUse);\r\n\r\n      // localStorage.setItem('count', JSON.stringify(0));\r\n      setCount(0);\r\n      // localStorage.setItem('start', JSON.stringify(0));\r\n      setStart(0);\r\n      // localStorage.setItem('timer', JSON.stringify(-3));\r\n      setTimer(-3);\r\n      // localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n      setStartTimer(true);\r\n    }, 300);\r\n  };\r\n\r\n  const startGameHandler = () => {\r\n    // localStorage.setItem('start', JSON.stringify(1));\r\n    setStart(1);\r\n    const arrToUse:Card[]= [];\r\n    setCards(arrToUse);\r\n    setFirstCard(undefined);\r\n    setArea('');\r\n    setWinner(false);\r\n    // localStorage.setItem('startTimer', JSON.stringify(startTimer));\r\n    setStartTimer(false);\r\n\r\n  };\r\n  \r\n  const convertTime = (time:number) => {\r\n    const minutes:number = Math.floor(time / 60);\r\n    const seconds:number = time - minutes * 60;\r\n    let ret = '';\r\n    if (minutes > 0) {\r\n      ret += `${  minutes  }m:${  seconds < 10 ? '0' : ''}`;\r\n      ret += `${  seconds}s`;\r\n    } else {\r\n      ret+= `${seconds}sec`;\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  const saveNewResult= () => {\r\n    if (inputName) {\r\n      if (area === 'small'){\r\n        easyResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedEasyResults = easyResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        localStorage.setItem('easyResults', JSON.stringify(sortedEasyResults));\r\n        setEasyResults(sortedEasyResults);\r\n      } else if (area === 'medium'){\r\n        mediumResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedMediumResults = mediumResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setMediumResults(sortedMediumResults);\r\n      } else {\r\n        largeResults.push({\r\n          id: uuidv4(),\r\n          name: inputName,\r\n          steps: count,\r\n          time: timer,\r\n        });\r\n        const sortedLargeResults = largeResults.sort((a, b) => {\r\n          return a.time - b.time;\r\n        });\r\n        setLargeResults(sortedLargeResults);\r\n        setLargeResults(largeResults);\r\n      }\r\n      setArea('');\r\n      setWinner(false);\r\n      setInputName('');\r\n    } else {\r\n      alert('enter your name to save result');\r\n    }\r\n  \r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* onClick={()=>setRecords(false)} aria-hidden=\"true\" */} \r\n      <div className={`records-wrapper ${records && 'active'} `}>\r\n        <div className={`records ${records && 'active'} `}>\r\n          <button type='button' className='cancel-button' onClick={()=>setRecords(false)}>X</button>\r\n          <div className=\"row \">\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='EASY (4x4)' resultArr={easyResults} handleTime={convertTime} />\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='MEDIUM (6x6)' resultArr={mediumResults} handleTime={convertTime} />\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6 col-xs-12\">\r\n              <ResultTable heading='HARD (10x10)' resultArr={largeResults} handleTime={convertTime} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <header className=\"header\">\r\n        <div className=\"row middle-xs\">\r\n          <div className=\"col-sm-4 col-xs-9\">\r\n            <div className=\"button__start-wrapper\">\r\n              <button type=\"button\" className=\"button\" onClick={() => startGameHandler()}>{!start? 'PLAY AGAIN' : 'START GAME'}</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6 col-xs-12 last-xs\">\r\n            {start === 1 && (\r\n              <div className=\"button__option-wrapper\">\r\n                <Button label='4x4 easy' setGameHandler={() => setGame(4, 'small')} />\r\n                <Button label='6x6 medium' setGameHandler={() => setGame(6, 'medium')} />\r\n                <Button label='10x10 hard' setGameHandler={() => setGame(10, 'large')} />\r\n              </div>\r\n            ) }\r\n            {(start === 0) && \r\n           (\r\n             <div className=\"button__option-wrapper\">\r\n               <div className='count'>steps: {count > 0 && count}</div>\r\n               <div className='time'>time: {timer > 0 && convertTime(timer)}</div>\r\n             </div>\r\n           )}\r\n          </div>\r\n          <div className=\" col-sm-2 col-xs-3 last-sm\">\r\n            \r\n            <button type='button' className='button button--option button--record' onClick={()=>setRecords(true)}>Results</button>\r\n            \r\n          </div>\r\n        </div>\r\n      </header>\r\n      <div className=\"row center-xs\"> \r\n        <div className={`game ${area==='medium' && 'medium'} ${area==='large' && 'large'}`}>\r\n          <div className=\"card\">\r\n            {area && \r\n          cards.map((card: Card, index) => card.show ?\r\n            (\r\n              <CardFront area={area} card={card} />\r\n            ):\r\n            (\r\n              <CardBack area={area} card={card} timer={timer} changeToName={()=>changeToName(card, index)} />\r\n            )\r\n          )}\r\n            {winner && \r\n            <Winner count={count} saveNewResult={()=>saveNewResult()} handleTime={convertTime} timer={timer} myRef={inputEl} inputHandler={(e)=>setInputName(e.target.value)} inputName={inputName} />}\r\n          </div>\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default CardMemoryGame;","import React, { FC } from 'react';\r\n\r\ntype Props ={\r\n  label:string,\r\n  setGameHandler : () => void;\r\n};\r\n\r\n\r\nconst Button: FC<Props> = ({ setGameHandler, label }) => {\r\n  return (\r\n    <button type=\"button\" className=\"button button--option\" onClick={setGameHandler}>{label}</button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC } from 'react';\r\nimport type { Result }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\n\r\n\r\ntype Props = {\r\n  heading: string,\r\n  resultArr: Result[]\r\n  handleTime: (time:number) => string\r\n};\r\n\r\nconst ResultTable: FC<Props> = ({ heading, resultArr, handleTime }) => {\r\n  return (\r\n    <div>\r\n      <h5 className=\"results__heading\">{heading}</h5>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>name</th>\r\n            <th>time</th>\r\n            <th>steps</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultArr.map(({ name, steps, time, id }, index) => (\r\n            <tr key={id} className=\"statistics\">\r\n              <td className=\"statistics__place\"> {index + 1}. </td>\r\n              <td>{name.toUpperCase().substring(0, 12)}</td>\r\n              <td>{handleTime(time)}</td>\r\n              <td>{steps}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultTable;\r\n","import React, { FC } from 'react';\r\nimport type { Card }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\ntype Props ={\r\n  card : Card;\r\n  area : string\r\n};\r\n\r\n\r\n\r\nconst CardFront: FC<Props>= ({ card, area }) => {\r\n  return (\r\n    <div key={card.id} className={`card__front  ${area==='medium' && 'card__front--medium'}  ${area==='large' && 'card__front--large'}`}> \r\n      <div className='loader' /> \r\n      <img src={card.image} alt={card.image} className='card__front-image' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardFront;\r\n","import React, { FC } from 'react';\r\nimport type { Card }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\ntype Props ={\r\n  card : Card;\r\n  area : string\r\n\r\n  timer:number\r\n  changeToName: () => void;\r\n};\r\n\r\n\r\n\r\nconst CardBack: FC<Props>= ({ card, area, timer, changeToName }) => {\r\n  return (\r\n    <>\r\n      <div key={card.id} className={`card__back ${area==='medium' && 'card__back--medium'} ${area==='large' && 'card__back--large'}`}>\r\n        <button type=\"button\" className='card__back-button' onClick={changeToName}>+</button>\r\n      </div>\r\n      {timer < 0 && \r\n      <div className=\"start-counter-wrapper\">\r\n        <p className=\"start-counter\">{timer *-1}</p>\r\n      </div> }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardBack;\r\n","import React, { FC } from 'react';\r\n// import type { Card }  from '../../CardMemoryGame/CardMemoryGame';\r\n\r\n\r\ntype Props ={\r\n  count:number;\r\n  timer:number;\r\n  //   ref:React.MutableRefObject<null>;\r\n  inputName: string;\r\n  saveNewResult: () => void;\r\n  handleTime: (time:number) => string;\r\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  myRef: React.MutableRefObject<null>;\r\n};\r\n\r\n\r\nconst Winner: FC<Props>= ({ count, saveNewResult, handleTime, timer, inputHandler, inputName, myRef }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor=\"inputName\" className='input__label-wrapper'>\r\n        <p className='input__label'>enter your name to save result!</p>\r\n        <div className='input-wrapper'>\r\n          <input type=\"text\" className='input' onChange={inputHandler} value={inputName} ref={myRef} />\r\n          <button type=\"button\" className=\"input__button\" onClick={saveNewResult}>save</button>\r\n        </div>\r\n      </label>\r\n      <div className=\"winner-wrapper\"> \r\n        <h2 className=\"winner\">You are the winner!!! Your time is {handleTime(timer)} and you made {count} steps</h2>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Winner;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CardMemoryGame from './CardMemoryGame/CardMemoryGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardMemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}